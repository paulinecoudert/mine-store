{
  "version": 3,
  "sources": ["../../vuetify/src/composables/proxiedModel.ts", "../../vuetify/src/composables/router.tsx"],
  "sourcesContent": ["// Utilities\nimport { computed, ref } from 'vue'\nimport { getCurrentInstance, toKebabCase } from '@/util'\n\n// Types\nimport type { Ref } from 'vue'\n\n// Composables\nexport function useProxiedModel<\n  Props extends object & { [key in Prop as `onUpdate:${Prop}`]: ((val: any) => void) | undefined },\n  Prop extends Extract<keyof Props, string>,\n  Inner = Props[Prop],\n> (\n  props: Props,\n  prop: Prop,\n  defaultValue?: Props[Prop],\n  transformIn: (value?: Props[Prop]) => Inner = (v: any) => v,\n  transformOut: (value: Inner) => Props[Prop] = (v: any) => v,\n) {\n  const vm = getCurrentInstance('useProxiedModel')\n\n  const propIsDefined = computed(() => {\n    void props[prop]\n    return !!(\n      (vm?.vnode.props?.hasOwnProperty(prop) || vm?.vnode.props?.hasOwnProperty(toKebabCase(prop)))\n    )\n  })\n\n  const internal = ref(transformIn(props[prop])) as Ref<Inner>\n\n  return computed<Inner extends any[] ? Readonly<Inner> : Inner>({\n    get (): any {\n      if (propIsDefined.value) return transformIn(props[prop])\n      else return internal.value\n    },\n    set (newValue) {\n      if ((propIsDefined.value ? transformIn(props[prop]) : internal.value) === newValue) {\n        return\n      }\n      internal.value = newValue\n      vm?.emit(`update:${prop}`, transformOut(newValue))\n    },\n  })\n}\n", "// Utilities\nimport { getCurrentInstance, IN_BROWSER, propsFactory } from '@/util'\nimport {\n  computed,\n  nextTick,\n  onScopeDispose,\n  resolveDynamicComponent,\n  toRef,\n} from 'vue'\n\n// Types\nimport type { ComputedRef, PropType, Ref, SetupContext } from 'vue'\nimport type {\n  RouterLink as _RouterLink,\n  useLink as _useLink,\n  NavigationGuardNext,\n  RouteLocationNormalizedLoaded,\n  RouteLocationRaw,\n  Router,\n} from 'vue-router'\n\nexport function useRoute (): Ref<RouteLocationNormalizedLoaded | undefined> {\n  const vm = getCurrentInstance('useRoute')\n\n  return computed(() => vm?.proxy?.$route)\n}\n\nexport function useRouter (): Router | undefined {\n  return getCurrentInstance('useRouter')?.proxy?.$router\n}\n\nexport interface LinkProps {\n  href?: string\n  replace?: boolean\n  to?: RouteLocationRaw\n}\n\nexport interface UseLink extends Omit<Partial<ReturnType<typeof _useLink>>, 'href'> {\n  isLink: ComputedRef<boolean>\n  isClickable: ComputedRef<boolean>\n  href: Ref<string | undefined>\n}\n\nexport function useLink (props: LinkProps, attrs: SetupContext['attrs']): UseLink {\n  const RouterLink = resolveDynamicComponent('RouterLink') as typeof _RouterLink | string\n\n  const isLink = computed(() => !!(props.href || props.to))\n  const isClickable = computed(() => {\n    return isLink?.value || !!(attrs.onClick || attrs.onClickOnce)\n  })\n\n  if (typeof RouterLink === 'string') {\n    return {\n      isLink,\n      isClickable,\n      href: toRef(props, 'href'),\n    }\n  }\n\n  const link = props.to ? RouterLink.useLink(props as Required<LinkProps>) : undefined\n\n  return {\n    ...link,\n    isLink,\n    isClickable,\n    href: computed(() => props.to ? link?.route.value.href : props.href),\n  }\n}\n\nexport const makeRouterProps = propsFactory({\n  href: String,\n  replace: Boolean,\n  to: [String, Object] as PropType<RouteLocationRaw>,\n}, 'router')\n\nlet inTransition = false\nexport function useBackButton (router: Router | undefined, cb: (next: NavigationGuardNext) => void) {\n  let popped = false\n  let removeBefore: (() => void) | undefined\n  let removeAfter: (() => void) | undefined\n\n  if (IN_BROWSER) {\n    nextTick(() => {\n      window.addEventListener('popstate', onPopstate)\n      removeBefore = router?.beforeEach((to, from, next) => {\n        if (!inTransition) {\n          setTimeout(() => popped ? cb(next) : next())\n        } else {\n          popped ? cb(next) : next()\n        }\n        inTransition = true\n      })\n      removeAfter = router?.afterEach(() => {\n        inTransition = false\n      })\n    })\n    onScopeDispose(() => {\n      window.removeEventListener('popstate', onPopstate)\n      removeBefore?.()\n      removeAfter?.()\n    })\n  }\n\n  function onPopstate (e: PopStateEvent) {\n    if (e.state?.replaced) return\n\n    popped = true\n    setTimeout(() => (popped = false))\n  }\n}\n"],
  "mappings": "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",
  "names": ["useProxiedModel", "props", "prop", "defaultValue", "transformIn", "v", "transformOut", "vm", "getCurrentInstance", "propIsDefined", "computed", "vnode", "hasOwnProperty", "toKebabCase", "internal", "ref", "get", "value", "set", "newValue", "emit", "useRouter", "getCurrentInstance", "proxy", "$router", "useLink", "props", "attrs", "RouterLink", "resolveDynamicComponent", "isLink", "computed", "href", "to", "isClickable", "value", "onClick", "onClickOnce", "toRef", "link", "undefined", "route", "makeRouterProps", "propsFactory", "String", "replace", "Boolean", "Object", "inTransition", "useBackButton", "router", "cb", "popped", "removeBefore", "removeAfter", "IN_BROWSER", "nextTick", "window", "addEventListener", "onPopstate", "beforeEach", "from", "next", "setTimeout", "afterEach", "onScopeDispose", "removeEventListener", "e", "state", "replaced"]
}
