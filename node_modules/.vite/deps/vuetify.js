import {
  useLayout
} from "./chunk-LLHXFGLQ.js";
import "./chunk-AC5V73LW.js";
import {
  RtlSymbol,
  createRtl,
  en_default,
  provideRtl,
  useRtl
} from "./chunk-A3M3PH56.js";
import {
  IconSymbol,
  createIcons
} from "./chunk-MDUFMOSE.js";
import {
  ThemeSymbol,
  createTheme,
  useTheme
} from "./chunk-N5NGK5EL.js";
import {
  DefaultsSymbol,
  IN_BROWSER,
  SUPPORTS_TOUCH,
  consoleError,
  consoleWarn,
  createDefaults,
  defineComponent,
  getObjectValueByPath,
  getUid,
  mergeDeep
} from "./chunk-RAAT5NYK.js";
import {
  computed,
  inject,
  nextTick,
  provide,
  watchEffect
} from "./chunk-6N3Z7UMS.js";
import {
  reactive,
  ref,
  toRefs
} from "./chunk-3UE4FVFR.js";
import "./chunk-RSJERJUL.js";

// node_modules/vuetify/lib/composables/display.mjs
var DisplaySymbol = Symbol.for("vuetify:display");
var defaultDisplayOptions = {
  mobileBreakpoint: "lg",
  thresholds: {
    xs: 0,
    sm: 600,
    md: 960,
    lg: 1280,
    xl: 1920,
    xxl: 2560
  }
};
var parseDisplayOptions = function() {
  let options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : defaultDisplayOptions;
  return mergeDeep(defaultDisplayOptions, options);
};
function getClientWidth(isHydrate) {
  return IN_BROWSER && !isHydrate ? window.innerWidth : 0;
}
function getClientHeight(isHydrate) {
  return IN_BROWSER && !isHydrate ? window.innerHeight : 0;
}
function getPlatform() {
  const userAgent = IN_BROWSER ? window.navigator.userAgent : "ssr";
  function match(regexp) {
    return Boolean(userAgent.match(regexp));
  }
  const android = match(/android/i);
  const ios = match(/iphone|ipad|ipod/i);
  const cordova = match(/cordova/i);
  const electron = match(/electron/i);
  const chrome = match(/chrome/i);
  const edge = match(/edge/i);
  const firefox = match(/firefox/i);
  const opera = match(/opera/i);
  const win = match(/win/i);
  const mac = match(/mac/i);
  const linux = match(/linux/i);
  const ssr = match(/ssr/i);
  return {
    android,
    ios,
    cordova,
    electron,
    chrome,
    edge,
    firefox,
    opera,
    win,
    mac,
    linux,
    touch: SUPPORTS_TOUCH,
    ssr
  };
}
function createDisplay(options, isHydrate) {
  const {
    thresholds,
    mobileBreakpoint
  } = parseDisplayOptions(options);
  const height = ref(getClientHeight(isHydrate));
  const platform = getPlatform();
  const state = reactive({});
  const width = ref(getClientWidth(isHydrate));
  function onResize() {
    height.value = getClientHeight();
    width.value = getClientWidth();
  }
  if (isHydrate) {
    nextTick(() => onResize());
  }
  watchEffect(() => {
    const xs = width.value < thresholds.sm;
    const sm = width.value < thresholds.md && !xs;
    const md = width.value < thresholds.lg && !(sm || xs);
    const lg = width.value < thresholds.xl && !(md || sm || xs);
    const xl = width.value < thresholds.xxl && !(lg || md || sm || xs);
    const xxl = width.value >= thresholds.xxl;
    const name = xs ? "xs" : sm ? "sm" : md ? "md" : lg ? "lg" : xl ? "xl" : "xxl";
    const breakpointValue = typeof mobileBreakpoint === "number" ? mobileBreakpoint : thresholds[mobileBreakpoint];
    const mobile = !platform.ssr ? width.value < breakpointValue : platform.android || platform.ios || platform.opera;
    state.xs = xs;
    state.sm = sm;
    state.md = md;
    state.lg = lg;
    state.xl = xl;
    state.xxl = xxl;
    state.smAndUp = !xs;
    state.mdAndUp = !(xs || sm);
    state.lgAndUp = !(xs || sm || md);
    state.xlAndUp = !(xs || sm || md || lg);
    state.smAndDown = !(md || lg || xl || xxl);
    state.mdAndDown = !(lg || xl || xxl);
    state.lgAndDown = !(xl || xxl);
    state.xlAndDown = !xxl;
    state.name = name;
    state.height = height.value;
    state.width = width.value;
    state.mobile = mobile;
    state.mobileBreakpoint = mobileBreakpoint;
    state.platform = platform;
    state.thresholds = thresholds;
  });
  if (IN_BROWSER) {
    window.addEventListener("resize", onResize, {
      passive: true
    });
  }
  return toRefs(state);
}
function useDisplay() {
  const display = inject(DisplaySymbol);
  if (!display)
    throw new Error("Could not find Vuetify display injection");
  return display;
}

// node_modules/vuetify/lib/composables/locale.mjs
var LocaleAdapterSymbol = Symbol.for("vuetify:locale-adapter");
var VuetifyLocaleSymbol = Symbol.for("vuetify:locale");
function useLocale() {
  const adapter = inject(LocaleAdapterSymbol);
  if (!adapter)
    throw new Error("[Vuetify] Could not find injected locale adapter");
  return adapter.getScope();
}
function isLocaleAdapter(x) {
  return !!x && x.hasOwnProperty("getScope") && x.hasOwnProperty("createScope") && x.hasOwnProperty("createRoot");
}
function createLocale(app, options) {
  const adapter = isLocaleAdapter(options) ? options : createDefaultLocaleAdapter(options);
  const instance = adapter.createRoot(app);
  app == null ? void 0 : app.provide(RtlSymbol, createRtl(instance, options));
  return adapter;
}
var LANG_PREFIX = "$vuetify.";
var replace = (str, params) => {
  return str.replace(/\{(\d+)\}/g, (match, index) => {
    return String(params[+index]);
  });
};
var createTranslateFunction = (current, fallback, messages) => {
  return function(key) {
    for (var _len = arguments.length, params = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      params[_key - 1] = arguments[_key];
    }
    if (!key.startsWith(LANG_PREFIX)) {
      return replace(key, params);
    }
    const shortKey = key.replace(LANG_PREFIX, "");
    const currentLocale = current.value && messages.value[current.value];
    const fallbackLocale = fallback.value && messages.value[fallback.value];
    let str = getObjectValueByPath(currentLocale, shortKey, null);
    if (!str) {
      consoleWarn(`Translation key "${key}" not found in "${current.value}", trying fallback locale`);
      str = getObjectValueByPath(fallbackLocale, shortKey, null);
    }
    if (!str) {
      consoleError(`Translation key "${key}" not found in fallback`);
      str = key;
    }
    if (typeof str !== "string") {
      consoleError(`Translation key "${key}" has a non-string value`);
      str = key;
    }
    return replace(str, params);
  };
};
function createNumberFunction(current, fallback) {
  return (value, options) => {
    const numberFormat = new Intl.NumberFormat([current.value, fallback.value], options);
    return numberFormat.format(value);
  };
}
function createDefaultLocaleAdapter(options) {
  const createScope = (options2) => {
    const current = ref(options2.current);
    const fallback = ref(options2.fallback);
    const messages = ref(options2.messages);
    return {
      current,
      fallback,
      messages,
      t: createTranslateFunction(current, fallback, messages),
      n: createNumberFunction(current, fallback)
    };
  };
  return {
    createRoot: (app) => {
      var _options$defaultLocal, _options$fallbackLoca, _options$messages;
      const rootScope = createScope({
        current: (_options$defaultLocal = options == null ? void 0 : options.defaultLocale) != null ? _options$defaultLocal : "en",
        fallback: (_options$fallbackLoca = options == null ? void 0 : options.fallbackLocale) != null ? _options$fallbackLoca : "en",
        messages: (_options$messages = options == null ? void 0 : options.messages) != null ? _options$messages : {
          en: en_default
        }
      });
      if (!app)
        throw new Error("[Vuetify] Could not find default app instance");
      app.provide(VuetifyLocaleSymbol, rootScope);
      return rootScope;
    },
    getScope: () => {
      const currentScope = inject(VuetifyLocaleSymbol);
      if (!currentScope)
        throw new Error("[Vuetify] Could not find injected locale instance");
      return currentScope;
    },
    createScope: (options2) => {
      const currentScope = inject(VuetifyLocaleSymbol);
      if (!currentScope)
        throw new Error("[Vuetify] Could not find injected locale instance");
      const newScope = createScope({
        current: computed(() => {
          var _options$locale;
          return (_options$locale = options2 == null ? void 0 : options2.locale) != null ? _options$locale : currentScope.current.value;
        }),
        fallback: computed(() => {
          var _options$locale2;
          return (_options$locale2 = options2 == null ? void 0 : options2.locale) != null ? _options$locale2 : currentScope.fallback.value;
        }),
        messages: computed(() => {
          var _options$messages2;
          return (_options$messages2 = options2 == null ? void 0 : options2.messages) != null ? _options$messages2 : currentScope.messages.value;
        })
      });
      provide(VuetifyLocaleSymbol, newScope);
      return newScope;
    }
  };
}

// node_modules/vuetify/lib/framework.mjs
var createVuetify = function() {
  let vuetify = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
  const install = (app) => {
    const {
      blueprint,
      ...rest
    } = vuetify;
    const options = mergeDeep(blueprint, rest);
    const {
      aliases = {},
      components = {},
      directives = {}
    } = options;
    for (const key in directives) {
      app.directive(key, directives[key]);
    }
    for (const key in components) {
      app.component(key, components[key]);
    }
    for (const key in aliases) {
      app.component(key, defineComponent({
        ...aliases[key],
        name: key
      }));
    }
    function provideApp(isHydrate) {
      app.provide(DefaultsSymbol, createDefaults(options.defaults));
      app.provide(DisplaySymbol, createDisplay(options.display, isHydrate));
      app.provide(ThemeSymbol, createTheme(app, options.theme));
      app.provide(IconSymbol, createIcons(options.icons));
      app.provide(LocaleAdapterSymbol, createLocale(app, options.locale));
    }
    if (!IN_BROWSER) {
      provideApp();
    }
    getUid.reset();
    const mount = app.mount;
    app.mount = (rootContainer, isHydrate, isSVG) => {
      provideApp(isHydrate);
      const ret = mount(rootContainer, isHydrate, isSVG);
      app.mount = mount;
      return ret;
    };
    function inject2(key) {
      var _vm$parent$provides, _vm$parent, _vm$vnode$appContext;
      const vm = this.$;
      const provides = (_vm$parent$provides = (_vm$parent = vm.parent) == null ? void 0 : _vm$parent.provides) != null ? _vm$parent$provides : (_vm$vnode$appContext = vm.vnode.appContext) == null ? void 0 : _vm$vnode$appContext.provides;
      if (provides && key in provides) {
        return provides[key];
      }
    }
    app.mixin({
      computed: {
        $vuetify() {
          return reactive({
            defaults: inject2.call(this, DefaultsSymbol),
            display: inject2.call(this, DisplaySymbol),
            theme: inject2.call(this, ThemeSymbol),
            icons: inject2.call(this, IconSymbol),
            locale: inject2.call(this, LocaleAdapterSymbol),
            rtl: inject2.call(this, RtlSymbol)
          });
        }
      }
    });
  };
  return {
    install
  };
};
export {
  createVuetify,
  provideRtl,
  useDisplay,
  useLayout,
  useLocale,
  useRtl,
  useTheme
};
//# sourceMappingURL=vuetify.js.map
