{
  "version": 3,
  "sources": ["../../vuetify/src/components/VProgressCircular/VProgressCircular.tsx"],
  "sourcesContent": ["// Styles\nimport './VProgressCircular.sass'\n\n// Composables\nimport { makeSizeProps, useSize } from '@/composables/size'\nimport { makeTagProps } from '@/composables/tag'\nimport { makeThemeProps, provideTheme } from '@/composables/theme'\nimport { useIntersectionObserver } from '@/composables/intersectionObserver'\nimport { useResizeObserver } from '@/composables/resizeObserver'\nimport { useTextColor } from '@/composables/color'\n\n// Utilities\nimport { computed, ref, toRef, watchEffect } from 'vue'\nimport { convertToUnit, defineComponent, useRender } from '@/util'\n\n// Types\nimport type { PropType } from 'vue'\n\nexport const VProgressCircular = defineComponent({\n  name: 'VProgressCircular',\n\n  props: {\n    bgColor: String,\n    color: String,\n    indeterminate: [Boolean, String] as PropType<boolean | 'disable-shrink'>,\n    modelValue: {\n      type: [Number, String],\n      default: 0,\n    },\n    rotate: {\n      type: [Number, String],\n      default: 0,\n    },\n    width: {\n      type: [Number, String],\n      default: 4,\n    },\n\n    ...makeSizeProps(),\n    ...makeTagProps({ tag: 'div' }),\n    ...makeThemeProps(),\n  },\n\n  setup (props, { slots }) {\n    const MAGIC_RADIUS_CONSTANT = 20\n    const CIRCUMFERENCE = 2 * Math.PI * MAGIC_RADIUS_CONSTANT\n\n    const root = ref<HTMLElement>()\n\n    const { themeClasses } = provideTheme(props)\n    const { sizeClasses, sizeStyles } = useSize(props)\n    const { textColorClasses, textColorStyles } = useTextColor(toRef(props, 'color'))\n    const { textColorClasses: underlayColorClasses, textColorStyles: underlayColorStyles } = useTextColor(toRef(props, 'bgColor'))\n    const { intersectionRef, isIntersecting } = useIntersectionObserver()\n    const { resizeRef, contentRect } = useResizeObserver()\n\n    const normalizedValue = computed(() => Math.max(0, Math.min(100, parseFloat(props.modelValue))))\n    const width = computed(() => Number(props.width))\n    const size = computed(() => {\n      // Get size from element if size prop value is small, large etc\n      return sizeStyles.value\n        ? Number(props.size)\n        : contentRect.value\n          ? contentRect.value.width\n          : Math.max(width.value, 32)\n    })\n    const diameter = computed(() => (MAGIC_RADIUS_CONSTANT / (1 - width.value / size.value)) * 2)\n    const strokeWidth = computed(() => width.value / size.value * diameter.value)\n    const strokeDashOffset = computed(() => convertToUnit(((100 - normalizedValue.value) / 100) * CIRCUMFERENCE))\n\n    watchEffect(() => {\n      intersectionRef.value = root.value\n      resizeRef.value = root.value\n    })\n\n    useRender(() => (\n      <props.tag\n        ref={ root }\n        class={[\n          'v-progress-circular',\n          {\n            'v-progress-circular--indeterminate': !!props.indeterminate,\n            'v-progress-circular--visible': isIntersecting.value,\n            'v-progress-circular--disable-shrink': props.indeterminate === 'disable-shrink',\n          },\n          themeClasses.value,\n          sizeClasses.value,\n          textColorClasses.value,\n        ]}\n        style={[\n          sizeStyles.value,\n          textColorStyles.value,\n        ]}\n        role=\"progressbar\"\n        aria-valuemin=\"0\"\n        aria-valuemax=\"100\"\n        aria-valuenow={ props.indeterminate ? undefined : normalizedValue.value }\n      >\n        <svg\n          style={{\n            transform: `rotate(calc(-90deg + ${Number(props.rotate)}deg))`,\n          }}\n          xmlns=\"http://www.w3.org/2000/svg\"\n          viewBox={ `0 0 ${diameter.value} ${diameter.value}` }\n        >\n          <circle\n            class={[\n              'v-progress-circular__underlay',\n              underlayColorClasses.value,\n            ]}\n            style={ underlayColorStyles.value }\n            fill=\"transparent\"\n            cx=\"50%\"\n            cy=\"50%\"\n            r={ MAGIC_RADIUS_CONSTANT }\n            stroke-width={ strokeWidth.value }\n            stroke-dasharray={ CIRCUMFERENCE }\n            stroke-dashoffset={ 0 }\n          />\n\n          <circle\n            class=\"v-progress-circular__overlay\"\n            fill=\"transparent\"\n            cx=\"50%\"\n            cy=\"50%\"\n            r={ MAGIC_RADIUS_CONSTANT }\n            stroke-width={ strokeWidth.value }\n            stroke-dasharray={ CIRCUMFERENCE }\n            stroke-dashoffset={ strokeDashOffset.value }\n          />\n        </svg>\n\n        { slots.default && (\n          <div class=\"v-progress-circular__content\">\n            { slots.default({ value: normalizedValue.value }) }\n          </div>\n        ) }\n      </props.tag>\n    ))\n\n    return {}\n  },\n})\n"],
  "mappings": "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",
  "names": ["VProgressCircular", "defineComponent", "name", "props", "bgColor", "String", "color", "indeterminate", "Boolean", "modelValue", "type", "Number", "default", "rotate", "width", "makeSizeProps", "makeTagProps", "tag", "makeThemeProps", "setup", "slots", "MAGIC_RADIUS_CONSTANT", "CIRCUMFERENCE", "Math", "PI", "root", "ref", "themeClasses", "provideTheme", "sizeClasses", "sizeStyles", "useSize", "textColorClasses", "textColorStyles", "useTextColor", "toRef", "underlayColorClasses", "underlayColorStyles", "intersectionRef", "isIntersecting", "useIntersectionObserver", "resizeRef", "contentRect", "useResizeObserver", "normalizedValue", "computed", "max", "min", "parseFloat", "size", "value", "diameter", "strokeWidth", "strokeDashOffset", "convertToUnit", "watchEffect", "useRender", "undefined", "transform"]
}
